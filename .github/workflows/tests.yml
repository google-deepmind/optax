name: tests

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs: {}

permissions:
  contents: read  # to fetch code
  actions: write  # to cancel previous workflows

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  linting:
    name: "Lint check with flake8 and pylint"
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
            python-version: "3.11"
            cache: "pip"
            cache-dependency-path: "pyproject.toml"
      - name: Install linting dependencies
        run: |
          pip install -U pip setuptools wheel
          pip install -U flake8 pytest-xdist pylint pylint-exit
      - name: Lint with flake8
        run: |
          python3 -m flake8 --select=E9,F63,F7,F82,E225,E251 --show-source --statistics
      - name: Lint module files with pylint
        run: |
          PYLINT_ARGS="-efail -wfail -cfail -rfail"
          python3 -m pylint $(find optax -name '*.py' | grep -v 'test.py' | xargs) -d E1102 || pylint-exit $PYLINT_ARGS $?
      - name: Lint test files with pylint
        run: |
          PYLINT_ARGS="-efail -wfail -cfail -rfail"
          python3 -m pylint $(find optax -name '*_test.py' | xargs) -d W0212,E1102 || pylint-exit $PYLINT_ARGS $?
  ruff-lint:
    name: "Lint check with ruff"
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
            python-version: "3.11"
            cache: "pip"
            cache-dependency-path: "pyproject.toml"
      - name: Install ruff and lint check
        run: |
          pip install -U ruff
          ruff check .
  pre-commit:
    name: "Pre-commit check - `pre-commit run -a`"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
      - uses: pre-commit/action@2c7b3805fd2a0fd8c1884dcaebf91fc102a13ecd # v3.0.1
  doctests:
    needs: [pre-commit, linting, ruff-lint]  # do not run doctests if linting fails
    name: "Doctests on ${{ matrix.os }} with Python ${{ matrix.python-version }}"
    runs-on: "${{ matrix.os }}"
    strategy:
      matrix:
        python-version: ["3.11"]  # only build docs with a somewhat latest python
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
            python-version: "${{ matrix.python-version }}"
            cache: "pip"
            cache-dependency-path: 'pyproject.toml'
      - name: Build docs and run doctests
        run: |
          python3 -m pip install --quiet --editable ".[docs]"
          cd docs
          make html
          make doctest # run doctests
        shell: bash
  build-and-test:
    needs: [pre-commit, linting, ruff-lint]  # do not run tests if linting fails
    name: "Python ${{ matrix.python-version }} on ${{ matrix.os }} jax=${{ matrix.jax-version }}"
    runs-on: "${{ matrix.os }}"
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest]
        jax-version: [newest]
        include:
          - python-version: "3.10"
            os: "ubuntu-latest"
            jax-version: "0.4.27"  # Keep version in sync with pyproject.toml and copy.bara.sky!
          - python-version: "3.12"
            os: "ubuntu-latest"
            jax-version: "nightly"
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
            python-version: "${{ matrix.python-version }}"
            cache: "pip"
            cache-dependency-path: 'pyproject.toml'
      - name: Run CI tests
        run: JAX_VERSION="${{ matrix.jax-version }}" bash test.sh
        shell: bash
  markdown-link-check:
    name: "Check links in markdown files"
    runs-on: "ubuntu-latest"
    steps:
    - name: Checkout repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: Check links
      uses: gaurav-nelson/github-action-markdown-link-check@d53a906aa6b22b8979d33bc86170567e619495ec # v1.0.15
      with:
        use-quiet-mode: yes
        use-verbose-mode: yes
        config-file: 'mlc_config.json'
